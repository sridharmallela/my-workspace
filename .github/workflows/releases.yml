name: Package Publish

on: [push]

permissions:
  contents: write
  actions: write

jobs:
  setup:
    runs-on: ubuntu-latest

    outputs:
      projects: ${{ steps.print-matrix.outputs.projects }}
      hasAffected: ${{ steps.print-matrix.outputs.hasAffected }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/

      - name: Install dependencies
        run: npm ci

      - name: Setup Nx tasks
        uses: nrwl/nx-set-shas@v4

      - name: Build all apps
        run: npm run build

      - name: Check for Affected Projects
        id: checkForAffected
        uses: 2coo/action-nx-affected@v2

      - name: Print affected matrix
        id: print-matrix
        run: |
          AFFECTED=${{ toJSON(steps.checkForAffected.outputs.affected) }}
          HAS_AFFECTED=${{ toJSON(steps.checkForAffected.outputs.hasAffected) }}
          echo "projects=${AFFECTED}" >> $GITHUB_OUTPUT
          echo "hasAffected=${HAS_AFFECTED}" >> $GITHUB_OUTPUT

  npm_publish:
    needs: setup

    if: ${{ needs.setup.outputs.hasAffected }}

    runs-on: ubuntu-latest

    strategy:
      matrix:
        affected: ${{ fromJSON(needs.setup.outputs.projects) }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Check package version for "${{ matrix.affected }}"
        id: cpv
        uses: PostHog/check-package-version@v2
        with:
          path: "${{ github.workspace }}/packages/${{ matrix.affected }}"

      - name: Dump affected context for "${{ matrix.affected }}"
        run: echo "${{ steps.cpv.outputs.is-new-version }}"

      # - name: Publish new version
      #   if: steps.cpv.outputs.is-new-version == 'true'
      #   run: npm publish
      #   env:
      #     NODE_AUTH_TOKEN: ${{secrets.npm_token}}

      # - name: Create Tag
      #   uses: piszmog/create-tag@v1
      #   if: steps.cpv.outputs.is-new-version == 'true'
      #   with:
      #     version: "v${{ steps.cpv.outputs.committed-version }}"
      #     message: "Release v${{ steps.cpv.outputs.committed-version }}"
      #     token: ${{ secrets.GITHUB_TOKEN }}

      # - name: Create Release
      #   uses: dev-build-deploy/release-me@v0
      #   if: steps.cpv.outputs.is-new-version == 'true'
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     prefix: v
      #     version: "v${{ steps.cpv.outputs.committed-version }}"
